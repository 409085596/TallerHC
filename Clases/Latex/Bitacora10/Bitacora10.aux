\relax 
\@writefile{toc}{\contentsline {paragraph}{En la clase 10 empezamos a ver listas en Python, que son una estructura de datos bastante importante para este lenguaje de programaci\IeC {\'o}n. Si ha de definirse en lenguaje coloquial de alguna manera, es un conjunto ordenado, el cual consta de elementos que tienen una posici\IeC {\'o}n en dicho conjunto. Para construirlo, basta con poner los elementos en el orden deseado, separados por comas, y encerrarlos dentro de corchetes. "[Esto, es, una, lista, de, 7, elementos]". Puede asign\IeC {\'a}rsele un nombre y guardarla como si se tratase de una variable cualquiera. Al fin y al cabo es un objeto, al igual de una cadena o un n\IeC {\'u}mero entero, s\IeC {\'o}lo que con propiedades diferentes. Ahora bien, divergiendo un poco en el tema, existe un comando llamado bool, el cual permite determinar si una variable de alg\IeC {\'u}n tipo determinado est\IeC {\'a} vac\IeC {\'\i }a o guarda alg\IeC {\'u}n valor relacionado con nulidad, dependiendo de su tipo de variable. Si no es nulo, devuelve verdadero; si lo es devuelve falso. Entonces, en el caso de n\IeC {\'u}meros enteros, ser\IeC {\'a} nulo su valor si es cero, en el caso de cadenas, ser\IeC {\'a} nulo si la cadena est\IeC {\'a} vac\IeC {\'\i }a. En el caso de las listas, si efectivamente est\IeC {\'a} vac\IeC {\'\i }a la lista, es decir, si es igual a []. Ahora bien, tambi\IeC {\'e}n se chec\IeC {\'o} otro comando aplicable \IeC {\'u}nicamente a las listas, el comando len, el cual devuelve el n\IeC {\'u}mero de elementos de una lista en particular. Es decir, si ponemos len([a,b,c,d]), len ser\IeC {\'a} igual a 4. La anterior es la forma de invocar la instrucci\IeC {\'o}n. Tambi\IeC {\'e}n vimos algunos m\IeC {\'e}todos de las listas, el .append("valor"), que agrega un elemento a la cola de la lista, el .insert(posicion, valor), en cual agrega en la posici\IeC {\'o}n deseada de la lista un valor dado, desplazando a la derecha el valor que ocupaba esa posici\IeC {\'o}n. Tambi\IeC {\'e}n vimos .pop() y .pop(posicion) el cual quita, en el primer caso, de la lista el \IeC {\'u}ltimo elemento o, en el segundo caso, el elemento cuya posici\IeC {\'o}n se determina. Este valor quitado se puede guardar como variable. Se vio el m\IeC {\'e}todo .extend("lista") en el cual a una lista dada se le pueden agregar los elementos de otra lista, que quedar\IeC {\'\i }an a la cola de la primera. Ahora, la manera en que se determinan las posiciones de los elementos de una lista es simple, el primer elemento ser\IeC {\'a} el elmento 0, y el \IeC {\'u}ltimo ser\IeC {\'a} el elemento len(lista)-1, lo que indica que todos los elementos se enumerar\IeC {\'a}n del 0 al len(lista).1. Si se quiere imprimir o guardar un elemento determinado de una lista, basta con escribir lista[posicion], lo cual regresar\IeC {\'a} el elemento solicitado. Ahora bien, es posible meter una lista dentro de otra, como si fuera un elemento cualquiera, por lo que si se quiere imprimir o guardar un elemento de esa lista anidada, basta con poner lista[posicionDeLaListaAnidada][Elemento], lo cual devolver\IeC {\'a} el valor sin problemas.//Ahora, se pas\IeC {\'o} a ver otro ciclo de Python, el ciclo for, el cual permite que se repita un proceso por cada elemento de una lista determinada. He aqu\IeC {\'\i } una transcrpici\IeC {\'o}n de los c\IeC {\'o}digos vistos en clase:}{2}}
