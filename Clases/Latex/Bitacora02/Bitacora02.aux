\relax 
\@writefile{toc}{\contentsline {paragraph}{\\En la clase 2 finalmente dejamos las charlas y en el taller de ciencias de la computaci\IeC {\'o}n 1 comenzamos a trabajar en el entorno de Linux. Los que trajimos nuestro propio computador, instalamos el sistema operativo y ejecutamos los comandos "apt-get update" y "apt-get upgrade" para actualizar la biblioteca de donde se descargan aplicaciones. A continuaci\IeC {\'o}n debimos realizar un paso importante para la din\IeC {\'a}mica del curso, que consisti\IeC {\'o} en crear un repositorio p\IeC {\'u}blico en el servidor git con el objeto de subir nuestros trabajos para su revisi\IeC {\'o}n. El procedimiento es sencillo en realidad, primero hay que crear la cuenta en github.com, con nuestro n\IeC {\'u}mero de cuenta como nombre de usuario y nuestro correo de ciencias como el correo de la cuenta. Una vez creada la cuenta, se tiene que acceder a nuestros repositorios en github.com y entonces hacer clic en nuevo. Entonces se pedir\IeC {\'a} la confirmaci\IeC {\'o}n de nuestro correo, con lo que se nos enviar\IeC {\'a} un mensaje al correo para as\IeC {\'\i } verificarlo. Una vez hecho esto, se nos permitir\IeC {\'a} crear el repositorio, s\IeC {\'o}lo habr\IeC {\'a} que nombrarlo. En mi caso particular, lo nombr\IeC {\'e} como TallerHC. Ahora viene la parte m\IeC {\'a}s complicada, que es sincronizar ese repositorio con el Linux de nuestro computador. En Bash, hay que escribir el comando "apt-get install git", que instalar\IeC {\'a} la aplicaci\IeC {\'o}n de git. A continuaci\IeC {\'o}n, hay que escribir "git init", que iniciar\IeC {\'a} la aplicaci\IeC {\'o}n, para entonces darnos de alta en la aplicaci\IeC {\'o}n con nuestro correo y nombre de usuario, para lo cual escribimos los comandos "git config --global user.email "correo"" y "git config --global user.name "NombreDeUsuario"". Una vez registrada la cuenta que queremos sincronizar, tenemos que clonar el repositorio de git que ya creamos en el servidor (TallerHC), en la carpeta de nuestra preferencia. Para ello, vamos a github.com y nos dirigimos al repositorio reci\IeC {\'e}n creado, donde encontraremos una opci\IeC {\'o}n que dice "clonar o descargar". Damos clic ah\IeC {\'\i } y copiamos la url que se nos presenta. Ahora nos dirigimos en Bash a la carpeta deseada y escribimos el comando "git clone "Direcci\IeC {\'o}nQueCopiamos"" con lo que el repositorio completo se descargar\IeC {\'a} a la carpeta deseada. Con esto estaremos preparados para empezar a guardar informaci\IeC {\'o}n en la carpeta descargada y as\IeC {\'\i } sincronizarla con el repositorio en git. Una vez se hayan guardado archivos en la carpeta TallerHC, para subirlos al servidor hay que ir en Bash a la carpeta de nuestro repositorio y escrbir "git add *" para que los archivos nuevos que no se hayan sincronizado previamente se preparen para la subida. Entonces hay que hacer un comentario de lo que vamos a subir, para ello escribimos el comando "git commit", donde se nos presentar\IeC {\'a} una secci\IeC {\'o}n para escribir la rese\IeC {\~n}a. En el caso de Slax, se presiona F2 para guardar el comentario y F10 para salir de la secci\IeC {\'o}n. Una vez hecho esto, se proceder\IeC {\'a} a subir los nuevos archivos, con el comando "git push". El sistema indicar\IeC {\'a} si se realiz\IeC {\'o} bien el proceso o no. Ahora bien, se puede checar previamente si existen archivos pendientes de sincronizarse con el servidor, para lo cual se utilizar\IeC {\'a} el comando "git status" el cual indica si hay archivos que no han sido sincronizados y si estos ya est\IeC {\'a}n en el proceso de sincronizarse. En el caso de que no haya, simplemente indicar\IeC {\'a} que el \IeC {\'a}rbol del directorio se encuentra limpio. Por otra parte, es posible que lo que se quiera hacer es descargar los archivos del servidor para actualizar el directorio que tenemos en nuestra computadora. Para ello, se puede usar "git status" para comprobar si existen archivos por descargar y en el caso afirmativo usamos "git pull" para la sincronizaci\IeC {\'o}n de descarga.\\De esta manera, en esta clase nos familiarizamos m\IeC {\'a}s en el entorno de Linux, y si bien hubo problemas para seguir los pasos en la ejecuci\IeC {\'o}n de las actividades, el simple hecho de seguirlos fue de mucha utilidad para dejar de tener como extra\IeC {\~n}o a un sistema que es usado por much\IeC {\'\i }simos desarrolladores por su caracter\IeC {\'\i }stica intr\IeC {\'\i }nseca de seguridad, versatilidad y apertura de la informaci\IeC {\'o}n.}{2}}
