\relax 
\@writefile{toc}{\contentsline {paragraph}{\\Se checaron una vez m\IeC {\'a}s los pasos para crear y sincronizar un repositorio de git. Como ejercicio se crearon en la carpeta TallerHC la carpeta Clases, que contendr\IeC {\'a} los archivos creados durante el curso y que estar\IeC {\'a} dividida en dos carpetas m\IeC {\'a}s: Latex y Programas. La primera carpeta contendr\IeC {\'a} nuestras bit\IeC {\'a}coras de cada d\IeC {\'\i }a y los archivos de Latex que creemos, mientras que programas contendr\IeC {\'a} los documentos para Python que creemos por igual. Para esta creaci\IeC {\'o}n se hizo uso del comando "mkdir" en Bash, donde se hizo la observaci\IeC {\'o}n que si se escrib\IeC {\'\i }a "mkdir -p "ruta de directorios" se pod\IeC {\'\i }a crear m\IeC {\'a}s de una carpeta por comando, estableciendo una ruta parental. A continuaci\IeC {\'o}n se cre\IeC {\'o} un archivo de nombre Clase03.txt que se guard\IeC {\'o} en la carpeta de Latex, en el cual se anotaron los pasos para crear un repositorio en git. Para hacer este archivo se utiliz\IeC {\'o} el comando vi en Bash, el cual lanza la aplicaci\IeC {\'o}n Vim, un editor de texto plano que se encuentra dentro del mismo Shell. El comando a ejecutar desde la carpeta de Latex es "vi Clase03.txt" el cual abre Vim para la edici\IeC {\'o}n del texto. Mostrar\IeC {\'a} el archivo vac\IeC {\'\i }o y para comenzar a editarlo es necesario teclear la letra "i". Se escribe el documento y una vez finalizada la edici\IeC {\'o}n se pulsa la tecla "esc" para dejar de editarlo. Ahora, para guardar y salir, se debe escribir el doble punto ":" seguido de "wq" (sin comillas) para entonces pulsar la tecla enter. El sistema regresar\IeC {\'a} a Bash, y se podr\IeC {\'a} comprobar que el documento creado existe en la carpeta actual. Se puede usar el comando "cat Clase03.txt" para checar de forma sucinta lo escrito. Ahora bien, si se desea salir sin guardar, se debe escribir ":q!", con lo cual el sistema no guardar\IeC {\'a} los cambios y, en su caso, no crear\IeC {\'a} el archivo. A continuaci\IeC {\'o}n, se debi\IeC {\'o} subir los directorios y el nuevo archivo al repositorio de git, para ello se usaron los comandos "git add *", "git commit" y "git push", tal y como se describi\IeC {\'o} en la bit\IeC {\'a}cora anterior.\\Despu\IeC {\'e}s de esta pr\IeC {\'a}ctica, se procedi\IeC {\'o} a explicar un poco el procedimiento para resolver un problema, un paso esencial para programar en cualquier lenguaje de computadora. B\IeC {\'a}sicamente, primero hay que definir el problema a resolver, es decir, hay que entenderlo debidamente, o de otra manera no sabr\IeC {\'\i }amos siquiera qu\IeC {\'e} es lo que hay que resolver. A continuaci\IeC {\'o}n es preciso analizarlo y delimitarlo, hay que entederlo en base a su contexto y sus fundamentos. Despu\IeC {\'e}s llega el momento de buscar soluciones al problema, buscar posibles aproximaciones, de forma vaga e intuitiva, que nos alumbrar\IeC {\'a}n un poco el camino a seguir. Esto s\IeC {\'o}lo ser\IeC {\'a} un primer paso, pues ahora que se tienen las posibles soluciones se necesita descrbirlas con detalle, en aras de hacerlas consistentes y comprobar si son efectivas en realidad. As\IeC {\'\i }, una vez que se tiene una soluci\IeC {\'o}n espec\IeC {\'\i }fica, llega la hora de dar un paso m\IeC {\'a}s y volverla general, que no s\IeC {\'o}lo resuelva el problema en algunas circunstancias, sino que sea \IeC {\'u}til en muchas situaciones para su mejor implementaci\IeC {\'o}n. De esta manera, se tendr\IeC {\'a} un soluci\IeC {\'o}n fuerte y resistente en la pr\IeC {\'a}ctica.}{2}}
