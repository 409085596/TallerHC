\relax 
\@writefile{toc}{\contentsline {paragraph}{\\Retomando lo visto y hecho la clase anterior, aprendimos primero un uso m\IeC {\'a}s elaborado de la instrucci\IeC {\'o}n print de Python. Para ello vimos un nuevo tipo de variable, que es la variable cadena, o string. Esta variable almacena texto, guarda una secuencia de caracteres sin alg\IeC {\'u}n valor l\IeC {\'o}gico. La manera de declarar una cadena es poner el texto a declarar entre comillas, es decir, "Esto es una cadena.". Se puede guardar con alg\IeC {\'u}n nombre espec\IeC {\'\i }fico, tal y como se guarda una variable de tipo entero. Ahora bien, con el comando print, se puede mandar a imprimir una cadena sin mayores inconvenientes, s\IeC {\'o}lo se escribe print "cadena". Esto es \IeC {\'u}til en programas complejos, para solicitar informaci\IeC {\'o}n o mostrar informaci\IeC {\'o}n que ayude a los usuarios a navegar por el sistema. Sin embargo, las cadenas tambi\IeC {\'e}n pueden volverse \IeC {\'u}tiles en programas simples, en el momento en que se desea editar el resultado de alg\IeC {\'u}n c\IeC {\'a}lculo hecho en el programa. En vez de s\IeC {\'o}lo imprimir el n\IeC {\'u}mero que da daterminada operaci\IeC {\'o}n, con una cadena se puede mandar a imprimir el n\IeC {\'u}mero con alg\IeC {\'u}n comentario, que lo haga entendible a aqu\IeC {\'e}l que lo lea. En el programa hecho en la clase anterior, con una cadena resulta sencillo mandar a imprimir la posici\IeC {\'o}n del objeto en el segundo cinco de una forma legible: "La posici\IeC {\'o}n de la pelota tras 5 segundos de haber sido lanzada es...", lo cual adem\IeC {\'a}s le confiere cierta elegancia. Para lograr esto es necesario hacer uso de cierto comodines que se colocan en los lugares de la cadena donde queremos imprimir las variables. Se utiliza el s\IeC {\'\i }mbolo \% seguido de una letra que indica el tipo de variable que desea imprimirse. A continuaci\IeC {\'o}n, al final de la cadena, se insertan las variables a imprimir, en el orden en que se fueron colocando sus comodines respectivos y en el formato \%(variable1, variable2, etc...). Ahora bien, respecto a estas letras, hay muchas y diversas, pero para mencionar algunas \%E es para formato cient\IeC {\'\i }fico, \%s para cadena, \%g para imprimir la variable en su expresi\IeC {\'o}n m\IeC {\'a}s corta posible, \%f para imprimir una variable en una expresi\IeC {\'o}n flotante, usualmente se usa de la forma \%a.bf, donde a es el n\IeC {\'u}mero m\IeC {\'\i }mimo de caracteres a imprimir y b el n\IeC {\'u}mero de decimales a imprimir. Si a no est\IeC {\'a} determinado, se imprime el valor de la variable sin alterar. Tambi\IeC {\'e}n tenemos \%e para formato cient\IeC {\'\i }fico de n\IeC {\'u}meros peque\IeC {\~n}os o \%d para n\IeC {\'u}mero enteros. Se realiz\IeC {\'o} un programa, de nombre EjemplosPrint.py para mostrar m\IeC {\'a}s comodines y sus usos. Ahora, como se dej\IeC {\'o} entrever, es posible imprimir variables de alg\IeC {\'u}n tipo determinado en un formato espec\IeC {\'\i }fico, como en el caso de las variables flotantes, aunque el mencionado archivo ya se encarga de mostrar m\IeC {\'a}s ejemplos. As\IeC {\'\i }, finalmente retornamos al caso del programa de la ca\IeC {\'\i }da libre, y haciendo un nuevo programa de nombre Ejemplo1Pelota\_05.py se edit\IeC {\'o} el resultado mediante una cadena. El c\IeC {\'o}digo que imprime la cadena es: "print 'La posici\IeC {\'o}n de la pelota en el t=\%g es \%.2f' \%(t,y)".\\Finalmente pasamos a ver una funci\IeC {\'o}n diferente de Python: Las funciones. \IeC {\'E}stas son una manera de crear "acciones" en Python que pueden invocarse en un momento deseado, sin tener que volver a implementar el c\IeC {\'o}digo completo. Por ejemplo, en el caso del programa de ca\IeC {\'\i }da libre, puede implementarse una funci\IeC {\'o}n que calcule la posici\IeC {\'o}n del objeto no s\IeC {\'o}lo para valores fijos, sino para los valores que deseemos sin tener que escribir la f\IeC {\'o}rmula en todo momento. Para esto se usa el comando def seguido del nombre que deseemos poner a la funci\IeC {\'o}n, seguido de las variables que ser\IeC {\'a}n usadas para hacer nuestro c\IeC {\'a}lculo entre par\IeC {\'e}ntesis y separadas por comas, todo seguido por dos puntos. Entonces nosotros debemos escribir debajo nuestra operaci\IeC {\'o}n, guard\IeC {\'a}ndola en una variable que ser\IeC {\'a} devuelta por la funci\IeC {\'o}n con el comando return. la variable devuelta por "return" determinar\IeC {\'a} el tipo de variable que ser\IeC {\'a} otorgado a la funci\IeC {\'o}n, y podr\IeC {\'a} utilizarse como si de una variable normal se tratar\IeC {\'a}. As\IeC {\'\i } pues, en el programa de la ca\IeC {\'\i }da libre, podemos escribir su funci\IeC {\'o}n de la siguiente manera:\\\\def CaidaLibre(tiempo, VelocidadInicial):\\\hspace  *{1cm}posicion = v0*t - 1.0/2*9.81*t**2\\\hspace  *{1cm}return(posicion)\\\\Esto permitir\IeC {\'a} introducir los valores que deseen para el tiempo y la velocidad inicial, simplemente con invocar la funci\IeC {\'o}n por su nombre e incluir en el orden establecido los valores entre par\IeC {\'e}ntesis. Si se corre el archivo una vez, incluso idle es capaz de invocar la funci\IeC {\'o}n desde donde sea que se haya guardado el archivo.\\El anterior sin duda fue un gran avance, dej\IeC {\'a}ndose como tarea el implementar una funci\IeC {\'o}n de la tarea pasada. Sin embargo, la clase a\IeC {\'u}n no terminaba y se comenz\IeC {\'o} a ver Latex, que es un sistema de composici\IeC {\'o}n de textos, que permite crear documentos de alta calidad y que es usado por muchos matem\IeC {\'a}ticos para escribir sus libros o los resultados de sus investigaciones. Para ello, al igual que Python, se instal\IeC {\'o} un editor de textos con el comando apt, de nombre texstudio, y en mi caso se instal\IeC {\'o} el lenguaje de Latex bajo el nombre de texlive, pues muchas otras distribuciones de Linux ya incluyen el lenguaje por defecto. Ahora bien, creamos un documento nuevo de nombre Ejercicio01.tex, con el que aprendimos la estructura b\IeC {\'a}sica de todo documento de Latex, as\IeC {\'\i } como algunos comandos de edici\IeC {\'o}n. Aprendimos los comandos para comenzar el documento, para crear un t\IeC {\'\i }tulo, para que el sistema reconozca caracteres de espa\IeC {\~n}ol, para poner negritas o cambiar de color el texto y para enumerar un listado, lo cual ser\IeC {\'a} esencial para crear las bit\IeC {\'a}coras del curso.}{3}}
